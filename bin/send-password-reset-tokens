#!/usr/bin/env ruby -Ilib
require "bundler"
Bundler.require :notifiers, :default, :development

begin
  require "dotenv"
  Dotenv.load ".env", ".env.development"
rescue LoadError
  # NOP, we're running in production
end

require "cgi"
require "connections/database"
require "user_password_change_requested"
require "user_password_reset"

# Waits for UserPasswordChangeRequested events and sends the corresponding emails.
#
# UserPasswordChangeRequested events have the following payload:
#
#     {
#       "email": "francois@teksol.info",
#       "token": "FQBhMT_hcHD5jAXmfRMnkYr94MpkzeKcPgGcgz8YAzHqldDexPlFVxMECoGzgjAv34yLvTRjJmGZYCCVbdpLSw",
#       "event_id": "0a221d19-c9bc-4fce-95df-b03861f807e2",
#       "created_at": "2017-06-29 20:41:04 -0400",
#       "request_ip": "::1",
#       "session_id": "f900ceba0600eb0098abfde8f5dc9932937b0e093685124b091dcebb2c729467",
#       "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/603.2.5 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.5"
#     }
#
# @return [Void]
def main
  running = true
  trap("TERM") { running = false }
  while running
    # In case there are requests that were generated before we started waiting for events
    send_pending_password_change_requested_emails
    send_pending_password_reset_emails

    DB.listen([UserPasswordChangeRequested.name, UserPasswordReset.name], loop: true) do |channel, _, _|
      break if !running

      # Ah! Someone requested a password change, or successfully executed a password change
      # Proceed with the correct email
      case channel
      when UserPasswordChangeRequested.name
        send_pending_password_change_requested_emails
      when UserPasswordReset.name
        send_pending_password_reset_emails
      end
    end
  end
end

def send_pending_password_change_requested_emails
  last_seen_sequence = repository.get_password_reset_requests_worker_state
  requests = repository.find_user_password_change_requests_after(last_seen_sequence)
  requests.each do |seq, request|
    DB.transaction do
      repository.set_password_reset_requests_worker_state(seq)
      mail = Mail.new do
        from "Ponzi <hello@ponzi.com>"
        to request.email
        subject "Ponzi Password Reset Request"
        body "Greetings, human!\n\nYou requested a password reset from Ponzi. Please visit the following URL to reset your password:\n\n    http://localhost:4567/?token=#{CGI.escape(request.token)}\n\nHave a wonderful day!"
      end

      # Don't actually send email, only pretend
      logger.info mail.to_s
    end
  end
end

def send_pending_password_reset_emails
  last_seen_sequence = repository.get_password_resets_worker_state
  requests = repository.find_user_password_resets_after(last_seen_sequence)
  requests.each do |seq, request|
    DB.transaction do
      repository.set_password_resets_worker_state(seq)
      mail = Mail.new do
        from "Ponzi <hello@ponzi.com>"
        to request.email
        subject "Ponzi Password Reset"
        body "Greetings, human!\n\nA successful password reset was executed on this email address. If this was an error, please contact us to rectify the situation.\n\nHave a wonderful day!"
      end

      # Don't actually send email, only pretend
      logger.info mail.to_s
    end
  end
end

def repository
  REPOSITORY
end

main
